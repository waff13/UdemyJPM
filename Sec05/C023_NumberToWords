public class NumberToWords {

    public static void numberToWords (int number) {
        if (number < 0) {
            System.out.println("Invalid Value");
        }
        int count = getDigitCount(number);
//        System.out.println("count = " + count);
//        System.out.println("initial number = " + number);
        number = reverse(number);
//        System.out.println("reversed number = " + number);
        int currentDigit;
        for (int i = 0; i < count; i++) {
            currentDigit = (number % 10);
            switch (currentDigit) {
                case 0:
                    System.out.println("Zero");
                    break;
                case 1:
                    System.out.println("One");
                    break;
                case 2:
                    System.out.println("Two");
                    break;
                case 3:
                    System.out.println("Three");
                    break;
                case 4:
                    System.out.println("Four");
                    break;
                case 5:
                    System.out.println("Five");
                    break;
                case 6:
                    System.out.println("Six");
                    break;
                case 7:
                    System.out.println("Seven");
                    break;
                case 8:
                    System.out.println("Eight");
                    break;
                case 9:
                    System.out.println("Nine");
                    break;
                default:
                    System.out.println("Whoa!");
                    break;
            }
            number = number / 10;
        }
    }

    public static int reverse (int number) {
        boolean isNegative = (number < 0);
        int reversedNumber = 0;
        int lastDigit;
        if (isNegative) {
            number = number * (-1);
        }
        while (number > 0) {
            reversedNumber *= 10;
            lastDigit = (number % 10);
            reversedNumber += lastDigit;
            number /= 10;
        }
        return isNegative ? reversedNumber * (-1) : reversedNumber;
    }

    public static int getDigitCount (int number) {
        if (number < 0) {
            return -1;
        }
        int count = 0;
        do {
            number = (number / 10);
            count++;
        } while (number > 0);
        return count;
    }
}
